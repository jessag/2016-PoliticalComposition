# -*- coding: utf-8 -*-
"""Assignment6_JessaGariepy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZXnvphCeBYShvGwz0n4XeBxuJKhRX-7w

**Module 6 - Assignment 6 - Advanced Geovisualization in Python.**

- Student: Jessa Gariepy
- Teacher: Professor Li
- Class: GIS 322
- Date: 04/13/2021

---
"""

# Import the neccessary modules

import numpy as np
!pip install geopandas;
import geopandas as gpd
from shapely.geometry import shape

from bokeh.io import output_file, show, output_notebook
from bokeh.models import ColumnDataSource, ColorBar, HoverTool
from bokeh.transform import linear_cmap
from bokeh.plotting import figure
from bokeh.palettes import Spectral6

#Enables notebook to display the map later
output_notebook()

# Import election data file

election_data = gpd.read_file("/content/US48_county_election_2016.shp")

# Preview data

election_data.head()

#per_dem = percent democrat
#per_gop = percent republican
#county_nam = name of the county

####################
#Percentage republican - Will be used for viewing purposes later in hover interaction
election_data['percent_republican'] = election_data['per_gop'] * 100


#Percentage Democrat- Will be used for viewing purposes later in hover interaction
election_data['percent_democrat'] = election_data['per_dem'] * 100


election_data.head()

# Helper function that converts a GeoDataFrame format into
# bokeh format by converting into longtidue/latitude that
# bokeh can utilize.

def gpd_bokeh(df):
    """Convert geometries from geopandas to bokeh format"""
    nan = float('nan')
    lons = []
    lats = []
    for i,shape in enumerate(df.geometry.values):
        if shape.geom_type == 'MultiPolygon':
            gx = []
            gy = []
            ng = len(shape.geoms) - 1
            for j,member in enumerate(shape.geoms):
                xy = np.array(list(member.exterior.coords))
                xs = xy[:,0].tolist()
                ys = xy[:,1].tolist()
                gx.extend(xs)
                gy.extend(ys)
                if j < ng:
                    gx.append(nan)
                    gy.append(nan)
            lons.append(gx)
            lats.append(gy)

        else:     
            xy = np.array(list(shape.exterior.coords))
            xs = xy[:,0].tolist()
            ys = xy[:,1].tolist()
            lons.append(xs)
            lats.append(ys) 

    return lons,lats

#Call gpd_bokeh() function to convert GDF into format bokeh can work with.
longs, lats = gpd_bokeh(election_data)


#Create a ColumnDataSource that contains geometry and attributes information
# for each county/row of our GeoDataFrame, election_data.

election_data_bokeh = ColumnDataSource(data = dict( #maps values to data dictionary
                                                   x = longs,
                                                   y= lats,
                                                   county = election_data["county_nam"], # attribute data we're interested in
                                                   per_rep = election_data ["per_gop"], # attribute data we're interested in
                                                   per_dem = election_data["per_dem"],
                                                   percent_republican = election_data ["percent_republican"], # attribute data we're interested in
                                                   percent_democrat = election_data["percent_democrat"])) # attribute data we're interested in

# Set up color scheme of the choropleth map using a linear_cmap

color_map = linear_cmap (field_name= 'per_dem', 
                         palette= ('#d73027','#fc8d59', '#fee090', '#e0f3f8', '#91bfdb', '#4575b4'),
                         low = min(election_data['per_dem']),
                         high = max(election_data ['per_dem']))

# Set tools within the map
TOOLS = "pan,wheel_zoom,reset,hover,save"

# Set up components of the map

# FIGURE - Sets up map canvas, size, tools and title:
map = figure(plot_width = 800, plot_height = 600,
             title ="Political Composition of the U.S by County, 2016", 
             tools = TOOLS,)

# PATCHES = Create the individual county patches based on provided geometry data.
map.patches('x', 'y', source = election_data_bokeh, line_color = "white", line_width=0.25,
            color = color_map)


# HOVERTOOL - Enable hover interactivity within the map
map.select_one(HoverTool).tooltips = [('County Name', '@county'),
                                      ('Percent Republican', '@percent_republican%'),
                                      ('Percent Democrat', '@percent_democrat%')]

# LEGEND - add the legend bar with the colors from color_map
color_legend= ColorBar(title ="Proportion of state voting blue",
                       orientation = 'horizontal',
                       color_mapper = color_map['transform'], width = 350, location = (-10,-10))

map.add_layout(color_legend, "below")

#Display the map

show(map)